server {
  listen 80 default_server;
  listen [::]:80 default_server;
##  server_name bitwarden.example.com;
##
##  return 301 https://bitwarden.example.com$request_uri;
##}
##
##server {
##  listen 8443 ssl http2;
##  listen [::]:8443 ssl http2;
##  server_name bitwarden.example.com;
##
##  ssl_certificate /etc/ssl/bitwarden.example.com/certificate.crt;
##  ssl_certificate_key /etc/ssl/bitwarden.example.com/private.key;
##  ssl_session_timeout 30m;
##  ssl_session_cache shared:SSL:20m;
##  ssl_session_tickets off;
##
##  ssl_protocols TLSv1.2;
##  ssl_ciphers "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256";
##  # Enables server-side protection from BEAST attacks
##  ssl_prefer_server_ciphers on;
##
##  # OCSP Stapling ---
##  # Fetch OCSP records from URL in ssl_certificate and cache them
##  ssl_stapling on;
##  ssl_stapling_verify on;
##
##  # Verify chain of trust of OCSP response using Root CA and Intermediate certs
##  ssl_trusted_certificate /etc/ssl/bitwarden.example.com/ca.crt;
##  resolver 1.1.1.1 1.0.0.1 9.9.9.9 149.112.112.112 valid=300s;

##  include /etc/nginx/security-headers-ssl.conf;
##  include /etc/nginx/security-headers.conf;

  location / {
    proxy_pass http://127.0.0.1:8080/;
    #include /etc/nginx/security-headers-ssl.conf;
    #include /etc/nginx/security-headers.conf;
    #add_header Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https://haveibeenpwned.com https://www.gravatar.com; child-src 'self' https://*.duosecurity.com https://*.duofederal.com; frame-src 'self' https://*.duosecurity.com https://*.duofederal.com; connect-src 'self' wss://bitwarden.dev.ma-z.net https://api.pwnedpasswords.com https://2fa.directory; object-src 'self' blob:;";
    #add_header X-Frame-Options SAMEORIGIN;
    #add_header X-Robots-Tag "noindex, nofollow";
  }

  location /alive {
    return 200 'alive';
    add_header Content-Type text/plain;
  }

#  location = /app-id.json {
#    proxy_pass http://web/app-id.json;
#    include /etc/nginx/security-headers-ssl.conf;
#    include /etc/nginx/security-headers.conf;
#    proxy_hide_header Content-Type;
#    add_header Content-Type $fido_content_type;
#  }
}

